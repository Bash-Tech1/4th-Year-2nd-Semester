---
import "../../styles/lecture.styles.css";
import { getCollection } from "astro:content";

export async function getStaticPaths() {
  const lectures = await getCollection("lectures");
  return lectures.map((lec) => ({
    params: { id: lec.data.id.toString() },
  }));
}

const { id } = Astro.params;

const lecture = (await getCollection("lectures")).find(
  (lec) => lec.data.id.toString() === id
);

const initialQuestions = lecture ? lecture.data.questions : [];
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>Software Engineering Course</title>
  </head>
  <body>
    <div class="container">
      <p class="question"></p>
      <div class="options"></div>
      <button class="next-btn" id="nextQuestionBtn">Next Question â†’</button>
      <p class="score">Score: <span id="score">0</span></p>
    </div>

    <audio
      id="correctSound"
      src="https://www.myinstants.com/media/sounds/correct.mp3"></audio>
    <audio
      id="wrongSound"
      src="https://www.myinstants.com/media/sounds/wrong.mp3"></audio>

    <script is:inline define:vars={{ initialQuestions }}>
      function shuffleArray(array) {
        for (let i = array.length - 1; i > 0; i--) {
          const j = Math.floor(Math.random() * (i + 1));
          [array[i], array[j]] = [array[j], array[i]];
        }
      }

      let currentQuestions = initialQuestions.map((q) => ({
        ...q,
        options: [...q.options],
      }));
      let retryQuestions = [];
      let currentQuestionIndex = 0;
      let score = 0;

      function loadQuestion() {
        const questionEl = document.querySelector(".question");
        const optionsEl = document.querySelector(".options");

        questionEl.style.opacity = "0";
        optionsEl.innerHTML = "";
        document.querySelector(".next-btn").style.display = "none";

        setTimeout(() => {
          const currentQ = currentQuestions[currentQuestionIndex];
          questionEl.innerHTML = `
            ${currentQ.question}
            <div class="shuffle-notice"></div>
          `;
          questionEl.style.opacity = "1";
        }, 200);

        const currentQ = currentQuestions[currentQuestionIndex];
        shuffleArray(currentQ.options);
        currentQ.options.forEach((option) => {
          const button = document.createElement("button");
          button.textContent = option;
          button.addEventListener("click", () => checkAnswer(option, button));
          optionsEl.appendChild(button);
        });
      }

      function checkAnswer(selected, button) {
        const correct = currentQuestions[currentQuestionIndex].answer;
        const allButtons = document.querySelectorAll(".options button");

        allButtons.forEach((btn) => (btn.disabled = true));

        if (selected === correct) {
          score += 10;
          document.getElementById("score").textContent = score;
          button.classList.add("correct");
          document.getElementById("correctSound").play();
          setTimeout(nextQuestion, 1000);
        } else {
          button.classList.add("wrong");
          document.getElementById("wrongSound").play();

          const currentQ = currentQuestions[currentQuestionIndex];
          if (!retryQuestions.some((q) => q.question === currentQ.question)) {
            retryQuestions.push({
              ...currentQ,
              options: [...currentQ.options],
            });
          }

          document.querySelector(".next-btn").style.display = "block";
        }
      }

      function nextQuestion() {
        currentQuestionIndex++;

        if (currentQuestionIndex < currentQuestions.length) {
          loadQuestion();
        } else {
          if (retryQuestions.length > 0) {
            currentQuestions = [...retryQuestions];
            retryQuestions = [];
            currentQuestionIndex = 0;
            loadQuestion();
          } else {
            document.querySelector(".container").innerHTML = `
              <h2>Quiz Completed!</h2>
              <p style="font-size: 1.2em;">Final Score: <strong>${score}</strong></p>
              <button onclick="location.reload()" style="margin-top: 20px; padding: 10px 20px; cursor: pointer;">
                Restart Quiz
              </button>
            `;
          }
        }
      }

      loadQuestion();
      document
        .getElementById("nextQuestionBtn")
        .addEventListener("click", nextQuestion);
    </script>
  </body>
</html>
